Index: src/SortArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class SortArray {\n    private String path;\n    private int [] arr;\n    ArrayList<String> intermediate_result;\n    public SortArray(String path) {\n        this.path=path;\n        read_from_file();\n    }\n    public void read_from_file()\n    {\n        try {\n            FileReader fileReader = new FileReader(path);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n            String line;\n            line = bufferedReader.readLine();\n            String[] strArray = line.split(\",\");\n            arr=new int[strArray.length];\n            for (int i = 0; i < strArray.length; i++) {\n                arr[i] = Integer.parseInt(strArray[i]);\n            }\n            bufferedReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public  int[] simpleSort(boolean returnIntermediate) {\n        int n = arr.length;\n        int[] sortedArr = Arrays.copyOf(arr, n);\n         intermediate_result=new ArrayList<>();\n          //bubble sort algorithm\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (sortedArr[j] > sortedArr[j + 1]) {\n                    int temp = sortedArr[j];\n                    sortedArr[j] = sortedArr[j + 1];\n                    sortedArr[j + 1] = temp;\n                }\n            }\n            intermediate_result.add(Arrays.toString(sortedArr));\n        }\n\n        if(returnIntermediate)\n        {\n            for(String s:intermediate_result)\n            {\n                System.out.println(s);\n            }\n        }\n\n        return sortedArr;\n    }\n    public int[] EfficientSort(boolean returnIntermediate)\n    {\n        int []sorted_array=arr.clone();\n         intermediate_result=new ArrayList<>();\n        merge_sort(sorted_array,intermediate_result);\n        if(returnIntermediate)\n        {\n            for(String s:intermediate_result)\n            {\n                System.out.println(s);\n            }\n        }\n        return  sorted_array;\n    }\n    private void merge_sort(int [] inputArray,ArrayList<String> intermediate_result)\n    {\n        int merge_size= inputArray.length;\n        if(merge_size<2) {\n            intermediate_result.add(Arrays.toString(inputArray));\n            return;\n        }\n        int left_size=merge_size/2;\n        int right_size=merge_size-left_size;\n        int [] left_array=new int[left_size];\n        int [] right_array=new int[right_size];\n        for(int i=0;i<left_size;i++)\n        {\n            left_array[i]=inputArray[i];\n        }\n        for(int i=left_size;i<merge_size;i++)\n        {\n            right_array[i-left_size]=inputArray[i];\n        }\n        merge_sort(left_array,intermediate_result);\n        merge_sort(right_array,intermediate_result);\n        merge(inputArray,left_array,right_array,intermediate_result);\n\n    }\n    private void merge(int[] inputArray,int [] leftArray,int [] rightArray,ArrayList<String> intermediate_result)\n    {\n        int left_size= leftArray.length;\n        int right_size= rightArray.length;\n        int i=0,j=0,k=0;\n\n        while(i<left_size && j<right_size)\n        {\n            if(leftArray[i]<=rightArray[j])\n            {\n                inputArray[k]=leftArray[i++];\n            }\n            else {\n                inputArray[k]=rightArray[j++];\n            }\n            k++;\n        }\n        while (i<left_size)\n        {\n         inputArray[k++]=leftArray[i++];\n        }\n        while (j<right_size)\n        {\n            inputArray[k++]=rightArray[j++];\n        }\n        intermediate_result.add(Arrays.toString(inputArray));\n    }\n    public int [] Non_Comparison_Sort(boolean returnIntermediate)\n    {\n        int min=Arrays.stream(arr).min().orElse(0);\n        int max=Arrays.stream(arr).max().orElse(Integer.MAX_VALUE);\n        int [] sortedArray=arr.clone();\n        int []countArray=new int[max-min+1];\n        for(int value:sortedArray)\n        {\n            countArray[value-min]++;\n        }\n        int index=0;\n        for (int i=0;i<max-min+1;i++)\n        {\n            while (countArray[i]>0)\n            {\n                sortedArray[index++]=i+min;\n                countArray[i]--;\n            }\n        }\n        return sortedArray;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SortArray.java b/src/SortArray.java
--- a/src/SortArray.java	(revision c99fc32821ae4d4e6a4a6085d0936f8d943ad927)
+++ b/src/SortArray.java	(date 1685143306406)
@@ -1,25 +1,27 @@
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.io.BufferedReader;
 import java.io.FileReader;
 import java.io.IOException;
+import java.util.Arrays;
+
 public class SortArray {
     private String path;
-    private int [] arr;
+    private int[] arr;
+
     ArrayList<String> intermediate_result;
     public SortArray(String path) {
-        this.path=path;
+        this.path = path;
         read_from_file();
     }
-    public void read_from_file()
-    {
+
+    public void read_from_file() {
         try {
             FileReader fileReader = new FileReader(path);
             BufferedReader bufferedReader = new BufferedReader(fileReader);
             String line;
             line = bufferedReader.readLine();
             String[] strArray = line.split(",");
-            arr=new int[strArray.length];
+            arr = new int[strArray.length];
             for (int i = 0; i < strArray.length; i++) {
                 arr[i] = Integer.parseInt(strArray[i]);
             }
@@ -28,11 +30,12 @@
             e.printStackTrace();
         }
     }
-    public  int[] simpleSort(boolean returnIntermediate) {
+
+    public int[] simpleSort(boolean returnIntermediate) {
         int n = arr.length;
         int[] sortedArr = Arrays.copyOf(arr, n);
          intermediate_result=new ArrayList<>();
-          //bubble sort algorithm
+        //bubble sort algorithm
         for (int i = 0; i < n - 1; i++) {
             for (int j = 0; j < n - i - 1; j++) {
                 if (sortedArr[j] > sortedArr[j + 1]) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"91a22561-522d-4f63-932b-cf635bbb3eed\" name=\"Changes\" comment=\"SortArray class\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/SortArray.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/SortArray.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test1.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test1.txt\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CodeStyleSettingsInfer\">\n    <option name=\"done\" value=\"true\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectCodeStyleSettingsMigration\">\n    <option name=\"version\" value=\"2\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2QFfZYoVAwGUk1GqIveeO5a5ROC\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\"\n  }\n}]]></component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"91a22561-522d-4f63-932b-cf635bbb3eed\" name=\"Changes\" comment=\"\" />\n      <created>1684954307625</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1684954307625</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"empty\">\n      <created>1684954560328</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1684954560328</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"SortArray class\">\n      <created>1684956508389</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1684956508389</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"empty\" />\n    <MESSAGE value=\"SortArray class\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"SortArray class\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c99fc32821ae4d4e6a4a6085d0936f8d943ad927)
+++ b/.idea/workspace.xml	(date 1685229709786)
@@ -5,10 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="91a22561-522d-4f63-932b-cf635bbb3eed" name="Changes" comment="SortArray class">
+      <change afterPath="$PROJECT_DIR$/src/Heap.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/SortArray.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/SortArray.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/test1.txt" beforeDir="false" afterPath="$PROJECT_DIR$/test1.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -27,6 +26,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
@@ -42,13 +42,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.ide.settings.new.ui&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
Index: src/Heap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Heap.java b/src/Heap.java
new file mode 100755
--- /dev/null	(date 1685230511274)
+++ b/src/Heap.java	(date 1685230511274)
@@ -0,0 +1,64 @@
+import java.util.ArrayList;
+
+public class Heap {
+    public ArrayList<Integer> arr;
+    public int size = 0;
+
+    public int parent(int i) {
+        return (i - 1) / 2;
+    }
+
+    public int leftChild(int i) {
+        return 2 * i + 1;
+    }
+
+    public int rightChild(int i) {
+        return 2 * i + 2;
+    }
+
+    public void swap(int i, int j) {
+        int temp = arr.get(i);
+        arr.set(i, arr.get(j));
+        arr.set(j, temp);
+    }
+
+    public void insert(int value) {
+        arr.set(size, value);
+        heapifyUp(size);
+        size++;
+    }
+
+    public void heapifyUp(int i) {
+        while (i > 0 && arr.get(i) < arr.get(parent(i))) {
+            swap(i, parent(i));
+            i = parent(i);
+        }
+    }
+
+    public void extract(int value) {
+        arr.set(size, value);
+        heapifyUp(size);
+        size++;
+    }
+
+    public void heapifyDown(int i) {
+        int smallest = i;
+        int left = leftChild(i);
+        int right = rightChild(i);
+
+        if (left < size && arr.get(left) < arr.get(smallest)) {
+            smallest = left;
+        }
+
+        if (right < size && arr.get(right) < arr.get(smallest)) {
+            smallest = right;
+        }
+
+        if (smallest != i) {
+            swap(i, smallest);
+            heapifyDown(smallest);
+        }
+    }
+
+
+}
